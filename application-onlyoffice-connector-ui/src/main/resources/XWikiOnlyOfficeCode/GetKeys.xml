<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWikiOnlyOfficeCode.GetKeys" locale="">
  <web>XWikiOnlyOfficeCode</web>
  <name>GetKeys</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#if ($xcontext.action == "get")
    #set ($editorData = "$!request.getParameter('data')")
    #if ($editorData == "")
        {error:"data: $editorData"}
    #else
        #set ($mymap = {})
        #set ($dataList = $jsontool.parse($editorData))
        #foreach($data in $dataList)
            #if(!$mymap[$data.doc])
                #set($mymap[$data.doc] = $collectionstool.map)
            #end
            #set($docMap = $mymap[$data.doc])
            #if(!$docMap[$data.mod])
                #set($docMap[$data.mod] = $collectionstool.map)
            #end
            #set ($ref = $services.model.resolveDocument($data.doc))
            #set ($getKey = $services.realtime.getChannelKey($ref, $data.mod, $data.editor))
            #if ("$!getKey.error" != "")
                #set ($mymap = $getKey)
                #break
            #end
            ##
            #foreach($key in $getKey.keys.keySet())
                #set($docMap[$data.mod][$key] = $getKey.keys[$key])
            #end
            ##
        #end
        $jsontool.serialize($mymap)
    #end
#else
    {{info}}This document is used internally by the XWiki OnlyOffice Connector application{{/info}}
#end
{{/velocity}}</content>
  <object>
    <name>XWikiOnlyOfficeCode.GetKeys</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>c4fd5c6a-3628-469c-98c3-45d10b9fbf0f</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>var PATHS = {
  '/bower_components/es6-promise/es6-promise.min.js': "$services.webjars.url('com.xwiki.onlyoffice-connector:application-onlyoffice-connector-webjar', 'es6-promise.min.js')",
  '/bower_components/reconnectingWebsocket/reconnecting-websocket.js': "$services.webjars.url('com.xwiki.onlyoffice-connector:application-onlyoffice-connector-webjar', 'reconnecting-websocket.js')",
};
for (var path in PATHS) { PATHS[path] = PATHS[path].replace(/\.js$/, ''); }
require.config({
  paths:PATHS
});
require.config({
  map: {
    "*": PATHS
  }
});

define(['jquery',
        "$services.webjars.url('com.xwiki.onlyoffice-connector:application-onlyoffice-connector-webjar', 'netflux-client.js')"], function ($, Netflux) {
    // Velocity
    var getKeysPath = "$xwiki.getURL('XWikiOnlyOfficeCode.GetKeys','get')?outputSyntax=plain";
    var websocketURL = "$!services.websocket.getURL('realtimeNetflux')";
    // Velocity end

    var module = {};

    var randString = function () {
        /** filling an array with Array().fill() will cause a continous loading screen: 'Loading OnlyOffice...' instead of the document being displayed.is in IE
         *  as a workaround, we use the [0,0,0,0,0,0] array.
         */
        return [0,0,0,0,0,0].map(function () {
            return Math.random().toString(32);
        }).join('').replace(/\./g,'');
    };
    var getChannelData = function (reference, attachmentName) {
        return [{doc: reference, mod: attachmentName, editor: "xoo"}];
    };
    var getKeys = function(channelData, callback) {
        $.ajax({
            url: getKeysPath,
            data: 'data='+encodeURIComponent(JSON.stringify(channelData)),
            type: 'POST'
        }).done(function(dataText) {
            var data = JSON.parse(dataText);
            if(data.error) { console.error("You don't have permissions to edit that document"); return; }
            callback(data);
        });
    };
    var errHandler = function(err) {
        console.error(err);
    };
    var getKeyFromNetfluxData = function (documentRef, attachmentName, data, type) {
        return (data &amp;&amp; data[documentRef]
                &amp;&amp; data[documentRef][attachmentName]
                &amp;&amp; data[documentRef][attachmentName].xoo
                &amp;&amp; typeof data[documentRef][attachmentName].xoo[type] !== "undefined") ?
          data[documentRef][attachmentName].xoo[type] : undefined;
    }
    var getJoinChannel = function (documentRef, attachmentName, callback) {
        return function (xChannelKey) {
            var netfluxKey = getKeyFromNetfluxData(documentRef, attachmentName, xChannelKey, "key");
            if (!netfluxKey) { errHandler("Unable to get the Netflux key"); return;}
            var cb = function (network) {
                var webchannel;
                var ooKey;
                var ready = false;
                var reconnect = false;
                /** Once the webchannel is joined :
                 * 1/ Ask for the history
                 * 2/ Check history messages to see if another user has created a key
                 *     - Existing key : open OnlyOffice wiht that key
                 *     - History ends without key : create a key, send it to the webchannel, and open OO
                 */
                var sendKey = function (key) {
                    if (typeof webchannel === "undefined") { return; }
                    var message = JSON.stringify({ooKey: key});
                    webchannel.bcast(message).then(function() {
                        // Key created and sent : open OnlyOffice
                        callback(key);
                    }, errHandler);
                };
                var onReceiveKey = function (msg) {
                    try {
                        var parsed = JSON.parse(msg);
                        if (parsed &amp;&amp; parsed.ooKey) {
                            if (ooKey) { reconnect = false; }
                            if (ooKey &amp;&amp; ooKey !== parsed.ooKey) {
                                errHandler("Reconnection error : another realtime channel was" +
                                           "created while being disconnected");
                                return;
                            }
                            ooKey = parsed.ooKey;
                            // We have a key : open OnlyOffice
                            callback(ooKey);
                        }
                    } catch (e) { errHandler(e); }
                };
                var onMessage = function (msg, sender, direct) {
                    if (ready &amp;&amp; !reconnect) { return; }
                    if (direct &amp;&amp; typeof webchannel !== "undefined" &amp;&amp; webchannel.hk === sender) {
                        var parsed = JSON.parse(msg);
                        if (parsed.state &amp;&amp; parsed.state === 1 &amp;&amp; parsed.channel) {
                            if (parsed.channel === webchannel.id) {
                                if (!ooKey) {
                                    // Generate a new key
                                    ooKey = randString().slice(0,20);
                                    sendKey(ooKey);
                                }
                                else if (reconnect &amp;&amp; ooKey) {
                                    sendKey(ooKey);
                                    reconnect = false;
                                }
                                ready = true;
                            }
                            return;
                        }
                        else if (parsed &amp;&amp; parsed[4]) {
                            onReceiveKey(parsed[4]);
                        }
                    } else {
                        onReceiveKey(msg);
                    }
                };
                var onOpen = function (chan) {
                    webchannel = chan;
                    chan.on('message', function (msg, sender) {
                        onMessage(msg, sender, false, chan);
                    });
                    if (ready &amp;&amp; !reconnect) { return; }
                    // Get the history
                    var hc;
                    chan.members.forEach(function (p) {
                        if (p.length === 16) { hc = p; }
                    });
                    chan.history_keeper = hc;
                    if (hc) {
                        webchannel.hk = hc;
                        network.sendto(hc, JSON.stringify(['GET_HISTORY', chan.id]));
                    }
                };
                // If the Netflux websocket if disconnected, reconnect to the channel and check if
                // the history with the OO key is still here. If the history is empty, send the
                // existing OO key to allow other users to join our realtime session.
                var onReconnect = function () {
                    var channelData = getChannelData(documentRef, attachmentName);
                    getKeys(channelData, function (xNewKey) {
                        var netfluxNewKey = getKeyFromNetfluxData(documentRef, attachmentName, xNewKey, "key");
                        var netfluxUsers = getKeyFromNetfluxData(documentRef, attachmentName, xNewKey, "users");
                        if (typeof netfluxNewKey === "undefined" || netfluxUsers === "undefined") {
                            errHandler("Unable to get the channel key after reconnection");
                            return;
                        }
                        network.join(netfluxNewKey).then(function (chan) {
                            if (parseInt(netfluxUsers) === 0) { reconnect = true; }
                            onOpen(chan);
                        }, errHandler);
                    });
                };
                network.on('reconnect', onReconnect);
                network.on('message', function (msg, sender) {
                    onMessage(msg, sender, true);
                });
                // Join the channel
                network.join(netfluxKey).then(onOpen, errHandler);
            }
            // Connect to Netflux
            Netflux.connect(websocketURL).then(cb, errHandler);
        };
    };
    var getOnlyOfficeKey = module.getKey = function (documentRef, attachmentName, callback) {
        var channelData = getChannelData(documentRef, attachmentName);
        var joinChannel = getJoinChannel(documentRef, attachmentName, callback);
        getKeys(channelData, joinChannel);
    };
    return module;
});
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
